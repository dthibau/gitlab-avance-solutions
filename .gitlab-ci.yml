# This file is a template, and might need editing before it works on your project.
---
# Build JAVA applications using Apache Maven (http://maven.apache.org)
# For docker image tags see https://hub.docker.com/_/maven/
#
# For general lifecycle information see https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
#
# This template will build and test your projects as well as create the documentation.
#
# * Caches downloaded dependencies and plugins between invocation.
# * Verify but don't deploy merge requests.
# * Deploy built artifacts from master branch only.
# * Shows how to use multiple jobs in test stage for verifying functionality
#   with multiple JDKs.
# * Uses site:stage to collect the documentation for multi-module projects.
# * Publishes the documentation for `master` branch.
include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

default:
  image:
    name: openjdk:21-jdk-oracle
  tags:
    - docker
variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  APP_JAR: "delivery-service-0.0.1-SNAPSHOT.jar"
# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository
workflow:
  auto_cancel:
    on_new_commit: interruptible

stages:
  - package
  - deploy-image
  - test
  - deploy-review
  - deploy-staging
  - deploy-production

package:
  stage: package
  interruptible: true
  rules:
    - if: $CI_COMMIT_BRANCH != 'production'
  script:
    - echo "Tests unitaire et packaging"
    - ./mvnw $MAVEN_OPTS clean package
  artifacts:
    paths:
      - target/*.jar

deploy-image:
  stage: deploy-image
  interruptible: true
  image: docker
  rules:
    - if: $CI_COMMIT_BRANCH != 'production'
  script:
     - ls
     - mv target/$APP_JAR .
     -  docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
     - docker build -t $CI_REGISTRY/$CI_PROJECT_NAMESPACE/delivery-service:$CI_COMMIT_BRANCH .
     - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/delivery-service:$CI_COMMIT_BRANCH

jacoco:
  stage: test
  interruptible: true
  rules:
    - if: $CI_COMMIT_BRANCH != 'production'
  script:
    - echo "Computing coverage report"
    - ./mvnw test
    - cp -r target/site/jacoco/ coverage/
  dependencies: []
  artifacts:
    paths:
      - coverage/
    expose_as: 'Rapport Jacocco'
    reports:
      junit:
        - target/surefire-reports/*.xml

integration-test:
  services:
    - name : $CI_REGISTRY/root/delivery-service:$CI_COMMIT_BRANCH
      alias: delivery-service
  image: dthibau/jmeter
  rules:
    - if: $CI_COMMIT_BRANCH != 'production'
  stage: test
  interruptible: true
  artifacts:
    paths:
      - fonctionnel-report/
    expose_as: 'Rapport tests fonctionnels'
  dependencies:
    - package
  script:
    # Testing some URLS les tests JMeter
    - echo "Testing some URLs ..."
    - jmeter -n -JSERVEUR=delivery-service -t src/test/jmeter/Fonctionnel.jmx -l results.jtl -e -o fonctionnel-report


deploy_review:
  stage: deploy-review
  image: docker
  rules:
    - if: '$CI_COMMIT_REF_PROTECTED == "false" && $CI_PIPELINE_SOURCE != "merge_request_event"'
  script:
    - echo "Deploy a review app"
    - env
    - echo $CI_COMMIT_BRANCH
    - docker stop $CI_COMMIT_BRANCH || true
    - docker rm $CI_COMMIT_BRANCH || true
    - docker run -d -p 7978:8080 --name $CI_COMMIT_BRANCH $CI_REGISTRY/$CI_PROJECT_NAMESPACE/delivery-service:$CI_COMMIT_BRANCH
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://gitlab.formation.org:7978
    on_stop: stop-review
  dependencies: []

stop-review:
  stage: deploy-review
  image: docker
  variables:
    GIT_STRATEGY: none
  script:
    - echo "Remove review app"
    - docker stop $CI_COMMIT_BRANCH || true
    - docker rm $CI_COMMIT_BRANCH || true
  when: manual
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop


deploy_staging:
  stage: deploy-staging
  image: docker
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'
  script:
    - echo "Deploy to staging server"
    - docker stop main || true
    - docker rm main || true
    - docker run -d -p 7979:8080 --name $CI_COMMIT_BRANCH $CI_REGISTRY/$CI_PROJECT_NAMESPACE/delivery-service:main
  environment:
    name: staging
    url: http://gitlab.formation.org:7979
  dependencies: []

push_to_production:
  stage: deploy-production
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'
  tags:
    - shell
  script:
    - git config --global user.email "ci-bot@example.com"
    - git config --global user.name "CI Bot"
    - git branch
    - git remote -v
    - git checkout production  # Bascule sur la branche de production
    - git merge origin/main  # Fusionne les changements de la branche main
    - git push http://production-token:$PUSH_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git production  # Pousse vers la branche protégée production
  dependencies: []
  when: manual

deploy_prod:
  stage: deploy-production
  image: docker
  rules:
    - if: $CI_COMMIT_BRANCH == 'production'
  script:
    - echo "Deploy to production server"
    - docker tag $CI_REGISTRY/$CI_PROJECT_NAMESPACE/delivery-service:main $CI_REGISTRY/$CI_PROJECT_NAMESPACE/delivery-service:production
    - docker stop production || true
    - docker rm production || true
    - docker run -d -p 8080:8080 --name $CI_COMMIT_BRANCH $CI_REGISTRY/$CI_PROJECT_NAMESPACE/delivery-service:production
  environment:
    name: production
    url: http://gitlab.formation.org:8080
  dependencies: []





